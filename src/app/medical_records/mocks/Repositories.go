// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	medical_records "digimer-api/src/app/medical_records"

	mock "github.com/stretchr/testify/mock"
)

// Repositories is an autogenerated mock type for the Repositories type
type Repositories struct {
	mock.Mock
}

// CountDataByID provides a mock function with given fields: id
func (_m *Repositories) CountDataByID(id string) int {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: id
func (_m *Repositories) DeleteByID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindICDData provides a mock function with given fields: icdCode
func (_m *Repositories) FindICDData(icdCode string) (medical_records.MRDetailReference, error) {
	ret := _m.Called(icdCode)

	var r0 medical_records.MRDetailReference
	if rf, ok := ret.Get(0).(func(string) medical_records.MRDetailReference); ok {
		r0 = rf(icdCode)
	} else {
		r0 = ret.Get(0).(medical_records.MRDetailReference)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(icdCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: domain
func (_m *Repositories) InsertData(domain medical_records.Domain) (string, error) {
	ret := _m.Called(domain)

	var r0 string
	if rf, ok := ret.Get(0).(func(medical_records.Domain) string); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(medical_records.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllData provides a mock function with given fields:
func (_m *Repositories) SelectAllData() ([]medical_records.Domain, error) {
	ret := _m.Called()

	var r0 []medical_records.Domain
	if rf, ok := ret.Get(0).(func() []medical_records.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medical_records.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDataByID provides a mock function with given fields: id
func (_m *Repositories) SelectDataByID(id string) (medical_records.Domain, error) {
	ret := _m.Called(id)

	var r0 medical_records.Domain
	if rf, ok := ret.Get(0).(func(string) medical_records.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(medical_records.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: id, domain
func (_m *Repositories) UpdateByID(id string, domain medical_records.Domain) error {
	ret := _m.Called(id, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, medical_records.Domain) error); ok {
		r0 = rf(id, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
