// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	medical_records "digimer-api/src/app/medical_records"

	mock "github.com/stretchr/testify/mock"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// AmendMedicalRecordByID provides a mock function with given fields: id, domain
func (_m *Services) AmendMedicalRecordByID(id string, domain medical_records.Domain) error {
	ret := _m.Called(id, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, medical_records.Domain) error); ok {
		r0 = rf(id, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountMedicalRecordByID provides a mock function with given fields: id
func (_m *Services) CountMedicalRecordByID(id string) int {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// CreateMedicalRecord provides a mock function with given fields: domain
func (_m *Services) CreateMedicalRecord(domain medical_records.Domain) (string, error) {
	ret := _m.Called(domain)

	var r0 string
	if rf, ok := ret.Get(0).(func(medical_records.Domain) string); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(medical_records.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMedicalRecordByID provides a mock function with given fields: id
func (_m *Services) DeleteMedicalRecordByID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMedicalRecords provides a mock function with given fields:
func (_m *Services) GetAllMedicalRecords() ([]medical_records.Domain, error) {
	ret := _m.Called()

	var r0 []medical_records.Domain
	if rf, ok := ret.Get(0).(func() []medical_records.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medical_records.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedicalRecordByID provides a mock function with given fields: id
func (_m *Services) GetMedicalRecordByID(id string) (medical_records.Domain, error) {
	ret := _m.Called(id)

	var r0 medical_records.Domain
	if rf, ok := ret.Get(0).(func(string) medical_records.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(medical_records.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
